[
    {
        "data": {
          "foo": ["bar", "baz"],
          "": 0,
          "a/b": 1,
          "c%d": 2,
          "e^f": 3,
          "g|h": 4,
          "i\\j": 5,
          "k\"l": 6,
          " ": 7,
          "m~n": 8
        },        
        "pointers": [
            "",
            "",
            "/foo",
            "/foo/0",
            "/foo/1",
            "/foo",
            "",
            "/",
            "",
            "/a~1b",
            "",
            "/c%d",
            "",
            "/e^f",
            "",
            "/g|h",
            "",
            "/i\\j",
            "",
            "/k\"l",
            "",
            "/ ",
            "",
            "/m~0n",
            ""
        ]
    },
    {
        "data": "foo",
        "pointers": [ "" ]
    },
    {
        "data": 42,
        "pointers": [ "" ]
    },
    {
        "data": {},
        "pointers": [ "", "" ]
    },
    {
        "data": [],
        "pointers": [ "", "" ]
    },
    {
        "description": "pointers are returned as expected when parsing a json object with property of various primitive types",
        "remark": "This and following tests are originally developed by Marcin Erdmann",
        "data": {
            "first": "foo",
            "second": 2,
            "third": true,
            "fourth": false,
            "fifth": null
        },
        "pointers": [
            "",
            "",
            "/first",
            "",
            "/second",
            "",
            "/third",
            "",
            "/fourth",
            "",
            "/fifth",
            ""
        ]
    },
    {
        "description": "pointers are returned as expected when parsing a json array with values of various primitive types",
        "data": [
            "foo",
            2,
            true,
            false,
            null
        ],
        "pointers": [
            "",
            "/0",
            "/1",
            "/2",
            "/3",
            "/4",
            ""
        ]
    },
    {
        "description": "pointers are returned as expected when parsing nested json objects",
        "data": {
            "parent": {
                "child": {
                    "notAnObject": "foo"
                }
            }
        },
        "pointers": [
            "",
            "",
            "/parent",
            "/parent",
            "/parent/child",
            "/parent/child",
            "/parent/child/notAnObject",
            "/parent/child",
            "/parent",
            ""
        ]
    },
    {
        "description": "pointers are returned as expected when parsing nested json arrays",
        "data": [ 
            [
                [],
                "foo"
            ]
        ],
        "pointers": [
            "",
            "/0",
            "/0/0",
            "/0/0",
            "/0/1",
            "/0",
            ""
        ]
    },
    {
        "description": "pointers are returned as expected when parsing arrays nested in json objects",
        "data": {
            "topLevel": ["value"],
            "parent": {
                "child": [2]
            }
        },
        "pointers": [
            "",
            "",
            "/topLevel",
            "/topLevel/0",
            "/topLevel",
            "",
            "/parent",
            "/parent",
            "/parent/child",
            "/parent/child/0",
            "/parent/child",
            "/parent",
            ""
        ]
    },
    {
        "description": "pointers are returned as expected when parsing objects nested in json arrays",
        "data": [
            {
                "topLevelObjectKey": "value"
            },
            [
                {
                    "nestedObjectKey": 2
                }
            ]
        ],
        "pointers": [
            "",
            "/0",
            "/0",
            "/0/topLevelObjectKey",
            "/0",
            "/1",
            "/1/0",
            "/1/0",
            "/1/0/nestedObjectKey",
            "/1/0",
            "/1",
            ""
        ]
    }
]
