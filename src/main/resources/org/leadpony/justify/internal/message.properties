#
# Copyright 2018 the Justify authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

line={location} {message}

location=[line:{row},column:{col}]
location.unknown=(unknown)

# InstanceType enumerators
InstanceType.NULL=null
InstanceType.BOOLEAN=boolean
InstanceType.OBJECT=object
InstanceType.ARRAY=array
InstanceType.NUMBER=number
InstanceType.STRING=string
InstanceType.INTEGER=integer

# Problems for any type
instance.problem.type=The value must be of {expected} type, but actual type is {actual}.
instance.problem.type.plural=The value must be of type in {expected}, but actual type is {actual}.
instance.problem.enum=The value must be one of {expected}.
instance.problem.const=The value must be the constant {expectedType} {expected}.

instance.problem.not.type=The value must not be of {expected} type.
instance.problem.not.type.plural=The value must not be of type in {expected}, but actual type is {actual}.
instance.problem.not.enum=The value must not be any of {expected}.
instance.problem.not.const=THe value must not be the constant {expectedType} {expected}.

# Problems for numeric type
instance.problem.multipleOf=The numeric value must be a multiple of {factor}.
instance.problem.maximum=The numeric value must be less than or equal to {limit}.
instance.problem.exclusiveMaximum=The numeric value must be less than {limit}.
instance.problem.minimum=The numeric value must be greater than or equal to {limit}.
instance.problem.exclusiveMinimum=The numeric value must be greater than {limit}.

instance.problem.not.multipleOf=The numeric value must not be a multiple of {factor}.

# Problems for string type
instance.problem.maxLength=The {localizedSubject} must be at most {limit} character(s), but actual length is {actual}.
instance.problem.minLength=The {localizedSubject} must be at least {limit} character(s), but actual length is {actual}.
instance.problem.pattern=The {localizedSubject} must match the pattern "{pattern}".

instance.problem.not.maxLength=The {localizedSubject} must be more than {limit} character(s), but actual length is {actual}.
instance.problem.not.minLength=The {localizedSubject} must be less than {limit} character(s), but actual length is {actual}.
instance.problem.not.pattern=The {localizedSubject} must not match the pattern "{pattern}".

string.key=key name
string.value=string value

# Problems for arrays
instance.problem.maxItems=The array must have at most {limit} element(s), but actual quantity is {actual}.
instance.problem.minItems=The array must have at least {limit} element(s), but actual quantity is {actual}.
instance.problem.uniqueItems=The array must consists only of unique elements, but the element at [{index}] is also found at [{firstIndex}].
instance.problem.cotains=The array must have an element satisfying the current schema.

instance.problem.minContains=The array must have at least {limit} element(s) satisfying the current schema.
instance.problem.maxContains=The array must have at most {limit} element(s) satisfying the current schema.

instance.problem.redundant.item=The array must not have an element at [{index}] and later.

instance.problem.not.uniqueItems=The array must have a duplicated element.

# Problems for objects
instance.problem.required=The object must have a property whose name is "{required}".
instance.problem.maxProperties=The object must have at most {limit} property(ies), but actual quantity is {actual}.
instance.problem.minProperties=The object must have at least {limit} property(ies), but actual quantity is {actual}.
instance.problem.dependencies=The object must have a property "{required}" when it has the property "{dependant}".

instance.problem.redundant.property=The object must not have a property whose name is "{name}".

instance.problem.not.required=The object must not have a property whose name is "{required}".
instance.problem.not.required.plural=The object must not have all of the properties {required|quote} together.
instance.problem.not.dependencies=The object must not have a property "{required}" when it has the property "{dependant}".
instance.problem.not.dependencies.plural=The object must not have all of the properties {required|quote} when it has the property "{dependant}".

# Problems for boolean logic
instance.problem.anyOf=At least one of the following sets of problems must be resolved.
instance.problem.anyOf.none=There must be at least one successful evaluation.
instance.problem.oneOf.few=Exactly one of the following sets of problems must be resolved.
instance.problem.oneOf.many=All but one of the following sets of problems must be resolved.

# Problems for formats
instance.problem.format=The value must be a valid {localizedAttribute}.
instance.problem.not.format=The value must not be a valid {localizedAttribute}.

# Format attributes
format.date=date
format.date-time=date and time
format.email=email address
format.hostname=host name
format.idn-email=internationalized email address
format.idn-hostname=internationalized host name
format.ipv4=IPv4 address
format.ipv6=IPv6 address
format.iri=IRI
format.iri-reference=IRI reference
format.json-pointer=JSON pointer
format.regex=regular expression
format.relative-json-pointer=relative JSON pointer
format.time=time
format.uri=URI
format.uri-reference=URI reference
format.uri-template=URI template

# Problems for others
instance.problem.unknown=The value never be valid according to the schema.

# Problems for schema
schema.problem.empty=The input must not be empty.
schema.problem.reference=The schema reference "{ref}"({targetId}) cannot be resolved.
schema.problem.format.unknown=The format attribute "{attribute}" is not supported.

# JSON-P parser
parser.unexpected.eoi=Unexpected end of input. Expected parser events are: {expected}.
parser.invalid.token=Invalid token={actual} at {location}. Expected tokens are: {expected}

# JSON-P reader
reader.unexpected.eoi=Unexpected end of input.
reader.read.error=JsonReader#read() is valid only for START_ARRAY, START_OBJECT parser events. \
But current parser event is {event}
