#
# Copyright 2018 the Justify authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
format=${location} ${message}

location=[line:${row},column:${col}]
location.unkown=(unknown)

# InstanceType enumerators
InstanceType.NULL=null
InstanceType.BOOLEAN=boolean
InstanceType.OBJECT=object
InstanceType.ARRAY=array
InstanceType.NUMBER=number
InstanceType.STRING=string
InstanceType.INTEGER=integer

# Problems for any type
instance.problem.type=Type of value must be one of ${expected}, but actual type was ${actual}.
instance.problem.type.single=Type of value must be ${expected}, but actual type was ${actual}.
instance.problem.enum=Value must be one of ${expected}.
instance.problem.const=Value must be constant ${expected}.

instance.problem.not.type=Type of value must be other than ${expected}, but actual type was ${actual}.
instance.problem.not.type.single=Type of value must not be ${expected}.
instance.problem.not.enum=Value must not be one of ${expected}.
instance.problem.not.const=Value must not be ${expected}.

# Problems for numeric type
instance.problem.multipleOf=Numeric value ${actual} is not a multiple of ${divisor}.
instance.problem.maximum=Numeric value ${actual} is too big, must be less than or equal to ${bound}.
instance.problem.exclusiveMaximum=Numeric value ${actual} is too big, must be less than ${bound}.
instance.problem.minimum=Numeric value ${actual} is too small, must be greater than or equal to ${bound}.
instance.problem.exclusiveMinimum=Numeric value ${actual} is too small, must be greater than ${bound}.

instance.problem.not.multipleOf=Numeric value ${actual} is a multiple of ${divisor}.

# Problems for string type
instance.problem.maxLength=Length of ${string.${context}} must be at most ${bound}, but actual length was ${actual}.
instance.problem.minLength=Length of ${string.${context}} must be at least ${bound}, but actual length was ${actual}.
instance.problem.pattern=${string.${context}:capital} does not match the regular expression ${pattern}.

instance.problem.not.maxLength=Length of ${string.${context}} must be more than ${bound}, but actual length was ${actual}.
instance.problem.not.minLength=Length of ${string.${context}} must be less than ${bound}, but actual length was ${actual}.
instance.problem.not.pattern=${string.${context}:capital} must not match the regular expression ${pattern}.

string.key=key name
string.value=string value

# Problems for arrays
instance.problem.maxItems=Array can contain at most ${bound} element(s), but there are ${actual} element(s).
instance.problem.minItems=Array must contain at least ${bound} element(s), but there are ${actual} element(s).
instance.problem.uniqueItems=Array contains duplicated elements at index ${lastIndex} and ${index}.
instance.problem.cotains=Array must contain one or more elements satisfying the schema.

instance.problem.minContains=At least ${expected} element(s) must satisfy the schema, but only ${actual} element(s) did.
instance.problem.maxContains=At most ${expected} element(s) can satisfy the schema, but ${actual} element(s) did.

instance.problem.unexpected.item=Array cannot have an element at index ${index}.

instance.problem.not.uniqueItems=Array must contain duplicated elements.

# Problems for objects
instance.problem.required=Object must have required properties ${expected}.
instance.problem.maxProperties=Object has too many properties. Its size must be at most ${bound}, but was ${actual}.
instance.problem.minProperties=Object has too few properties. Its size must be at least ${bound}, but was ${actual}.
instance.problem.dependencies=Object must have required properties ${missing} when ${dependant} exists.

instance.problem.unexpected.property=Object cannot contain a property ${name} as a member.

instance.problem.not.required=Object has too exhaustive properties. At least one of ${expected} must be left out.
instance.problem.not.required.single=Object must not have property ${expected}.
instance.problem.not.dependencies=At least one of properties ${required} must be left out when ${dependant} exists.

# Problems for boolean logic
instance.problem.anyOf=Any of the following sets of problems must be resolved.
instance.problem.anyOf.none=There must be at least one successful evaluation.
instance.problem.oneOf=One of the following sets of problems must be resolved.

# Problems for formats
instance.problem.format=The format of the value must be ${attribute}.
instance.problem.not.format=The format of the value must not be ${attribute}.

# Problems for others
instance.problem.unknown=Evaluated as invalid for an unknown reason.

# Problems for schema
schema.problem.empty=Input is empty.
schema.problem.dereference=Failed to resolve a JSON schema whose ID is "${ref}".
schema.problem.format.unknown=Format attribute ${attribute} is unknown.

internal.error=Internal Error

parser.unexpected.eoi=Unexpected end of input. Expected parser events are: ${expected}.
parser.invalid.token=Invalid token=${actual} at ${location}. Expected tokens are: ${expected}

reader.unexpected.eoi=Unexpected end of input.
reader.read.error=JsonReader#read() is valid only for START_ARRAY, START_OBJECT parser events. \
But current parser event is ${event}
